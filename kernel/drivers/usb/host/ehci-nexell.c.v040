/*
 * (C) Copyright 2010
 * jung hyun kim, Nexell Co, <jhkim@nexell.co.kr>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */
#include <linux/device.h>
#include <linux/signal.h>
#include <linux/platform_device.h>
#include <linux/pm.h>

/* nexell soc headers */
#include <mach/platform.h>
#include <mach/devices.h>

/* Debugging stuff */
#if (0)
#define DBGOUT(msg...)	{ printk(KERN_INFO "ehci: " msg); }
#else
#define DBGOUT(msg...)
#endif

static struct hc_driver __read_mostly ehci_nexell_hc_driver;

static int ehci_nx_driver_probe(struct platform_device *pdev)
{
	
	int irq;
	struct device *dev = &pdev->dev;
	struct usb_hcd *hcd;
	int ret;
	struct resource *res;
	
	DBGOUT("%s\n", __func__);

	irq = platform_get_irq(pdev, 0);
	
	printk( "----- CALL ehci_nx_driver_probe()\n" );
	printk( ">>> irq = %d\n", irq );
	printk( ">>> irq = %s\n", dev_name(dev) );
	
	hcd = usb_create_hcd(&ehci_nexell_hc_driver, dev, dev_name(dev));
	if (!hcd) return -ENOMEM;
	printk( ">>> usb_create_hcd() Success\n" );

	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
	if (!res) {
		dev_err(dev, "Found HC with no register addr. Check setup!\n");
		ret = -ENODEV;
		goto err_alloc;
	}

	hcd->rsrc_start = res->start;
	hcd->rsrc_len = resource_size(res);

	hcd->regs = devm_ioremap_resource(&pdev->dev, res);
	if (IS_ERR(hcd->regs)) {
		ret = PTR_ERR(hcd->regs);
		goto err_alloc;
	}
	printk( ">>> IO Resource Success\n" );
	
	
	platform_set_drvdata(pdev, hcd); 
	ret = usb_add_hcd(hcd, irq, IRQF_SHARED);
	if (ret) goto err_add;
	
	printk( ">>> usb_add_hcd() Success\n" );
    return 0;	
	
err_add:

	printk( ">>> usb_add_hcd() Error\n" );
	
err_alloc:
    printk( ">>> err_alloc() Error\n" );
	usb_put_hcd(hcd);
	
	return ret;
//	return usb_hcd_nx_probe(&ehci_hc_driver, pdev);
//	return usb_hcd_nx_probe(&ehci_nexell_hc_driver, pdev); // FALINUX
	
}


static struct platform_driver ehci_hcd_nexell_driver = {
	.probe		= ehci_nx_driver_probe,
//	.remove		= ehci_nx_driver_remove,
	.shutdown	= usb_hcd_platform_shutdown,
#ifdef CONFIG_PM
//	.suspend	= ehci_nx_driver_suspend,
//	.resume		= ehci_nx_driver_resume,
#endif
	.driver		= {
		.owner	= THIS_MODULE,
		.name	= EHCI_DEV_NAME,
	},
};

MODULE_ALIAS("platform:nexell-ehci");
